/*file
********************************************************************************
<PRE>
模块名       : 
文件名       : 
相关文件     : 
文件实现功能 : fifo 的使用
作者         :  xxxxx

--------------------------------------------------------------------------------
备注         : 

--------------------------------------------------------------------------------
修改记录 : 
日 期:      2008.2.2
版本 :		v1.0
修改人:
修改内容 :

</PRE>
********************************************************************************

* 版权所有(c) , <>, 保留所有权利
*******************************************************************************/
#ifndef _FX3_FIFO_H_
#define _FX3_FIFO_H_

#include "cyu3types.h"

#define FIFO_DEEPTH_MAX_VALUE (4096)

// fifo 的元素定义,在使用该过程中，最多为32bit,pop 和push 的时候需要处理为实际的bit数
typedef uint8_t FIFO_DATA;

//fifo的传入参数
typedef struct
{
    uint8_t *pFifoStart; // fifo最前面的数据指针
    uint8_t *pFifoEnd;   // fifo最后面的数据指针

    uint32_t nFifoLen;     // 定义fifo的深度
    uint32_t nFifoDataNum; // 当前填充的有效数据量
    CyBool_t isLock;       //fifo是否使能
    uint32_t nDataLen;     // fifo中元素的字节数一般为1/2/4,不能超过4
    uint8_t *pFifoBuffer;

} tagFifoParam;

#define FIFO_PARAM_DEFAULT     \
    {                          \
        NULL,                  \
        NULL,                  \
        FIFO_DEEPTH_MAX_VALUE, \
        0,                     \
        0,                     \
        4,                     \
        NULL                   \
    }

/*function
********************************************************************************
<PRE>
函数名   : 
功能     :初始化fifo
参数     : param 区分fifo的结构传入参数指针
		pfifoBuffer，fifo使用的实际的缓冲区，一般为4的倍数以字节计数
		nLen，fifo总共的的字节数
		nDatalen,fifo元素的字节目,只能为1/2/4
返回值   :  成功与否
抛出异常 : 
--------------------------------------------------------------------------------
备注     : 
典型用法 : 
--------------------------------------------------------------------------------
作者     : 
</PRE>
*******************************************************************************/
CyBool_t FifoInitial(tagFifoParam *param, void *pFifoBuffer, uint32_t nLen, uint32_t nDataLen);
/*function
********************************************************************************
<PRE>
函数名   : 
功能     :清空fifo
参数     : param 区分fifo的结构传入参数指针
返回值   :  成功与否
抛出异常 : 
--------------------------------------------------------------------------------
备注     : 
典型用法 : 
--------------------------------------------------------------------------------
作者     : 
</PRE>
*******************************************************************************/
void FifoFlush(tagFifoParam *param);

/*function
********************************************************************************
<PRE>
函数名   : 
功能     :向fifo中写入一个数据
参数     : param 区分fifo的结构传入参数指针
		d , 写入的数据，有效位数需要和param中的元素字节数匹配
返回值   :  
抛出异常 : 
--------------------------------------------------------------------------------
备注     : 
典型用法 : 
--------------------------------------------------------------------------------
作者     : 
</PRE>
*******************************************************************************/
void FifoPush(tagFifoParam *param, FIFO_DATA d);

/*function
********************************************************************************
<PRE>
函数名   : 
功能     :从fifo中读出一个数据
参数     : param 区分fifo的结构传入参数指针
	
返回值   :  读出的数据，有效位数需要和param中的元素字节数匹配
抛出异常 : 
--------------------------------------------------------------------------------
备注     : 
典型用法 : 
--------------------------------------------------------------------------------
作者     : 
</PRE>
*******************************************************************************/
FIFO_DATA FifoPop(tagFifoParam *param);

/*function
********************************************************************************
<PRE>
函数名   : 
功能     :得到目前fifo内字节数
参数     : param 区分fifo的结构传入参数指针
	
返回值   :  结果
抛出异常 : 
--------------------------------------------------------------------------------
备注     : 
典型用法 : 
--------------------------------------------------------------------------------
作者     : 
</PRE>
*******************************************************************************/
uint32_t FifoGetDataNumber(tagFifoParam *param);

/*function
********************************************************************************
<PRE>
函数名   : 
功能     :得到目前fifo的深度，以元素计数
参数     : param 区分fifo的结构传入参数指针
	
返回值   :  结果
抛出异常 : 
--------------------------------------------------------------------------------
备注     : 
典型用法 : 
--------------------------------------------------------------------------------
作者     : 
</PRE>
*******************************************************************************/
uint32_t FifoGetFifoDeepth(tagFifoParam *param);
/*function
********************************************************************************
<PRE>
函数名   : 
功能     :是否锁定fifo
参数     : param 区分fifo的结构传入参数指针
		en   1-锁定fifo，0-解锁fifo
返回值   :   
抛出异常 : 
--------------------------------------------------------------------------------
备注     : 
典型用法 : 
--------------------------------------------------------------------------------
作者     : 
</PRE>
*******************************************************************************/
void FifoLock(tagFifoParam *param, CyBool_t en);

/*function
********************************************************************************
<PRE>
函数名   : 
功能     :向fifo中写入一串位数据
参数     : param 区分fifo的结构传入参数指针
           d  写入的数据起始地址，
           Len 写入长度
返回值   :  
抛出异常 : 
--------------------------------------------------------------------------------
备注     : 
典型用法 : 
--------------------------------------------------------------------------------
作者     : 
</PRE>
*******************************************************************************/
void FifoPushNLen(tagFifoParam *param, FIFO_DATA *d, uint32_t Len);

#endif
