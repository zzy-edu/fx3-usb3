/*file
 ********************************************************************************
 <PRE>
 模块名       :
 文件名       :
 相关文件     :
 文件实现功能 : 采集系统的参数存储的配置管理
 作者         :

 --------------------------------------------------------------------------------
 备注         :

 外部调用方法
 --------------------------------------------------------------------------------
 修改记录 :
 日 期:    2025.6.24
 版本 :		v0.0
 修改人:
 修改内容 :

 </PRE>
 ********************************************************************************

 * 版权所有(c) , <>, 保留所有权利
 *******************************************************************************/

#ifndef _APP_GRAB_CFG_H_
#define _APP_GRAB_CFG_H_

#include <cyu3error.h>
#include "flash_map.h"

/*
 * flash 存储结构设定
 * 3.6M		fpga程序
 * 3.6M		fpga程序
 * 3.6M		fpga程序
 * 3.6M		fpga程序
 * 15-16M 	grab_param存储用
 */

#define	SET_BIT(x, bit)	(x |= (1 << bit))	/* 置位第bit位 */
#define	CLEAR_BIT(x, bit)	(x &= ~(1 << bit))	/* 清零第bit位 */

#define PARAM_VALID_HCODE (0x0143504400435044) // 当存储区开始为此code的时候表示该片code有效
#define PARAM_VALID_TCODE (0x0144514501445145)
#define IMAGE_WIDTH (640)
#define IMAGE_HEIGHT (512)
#define IMAGE_SIZE (IMAGE_WIDTH*IMAGE_HEIGHT)

#define CLK_NORM_CNT (15000000)


typedef struct {
	uint64_t header; // 固定帧头标志，依次为：0x44  0x50  0x43  0x00  0x44  0x50  0x43  0x01
	uint8_t n_dev_index; //图像采集的设备编号，可以根据实际情况设置。（1-255）    注：fpga不关心这个值，fx3无需保存，默认1，只要配置fpga即可上传。
	uint8_t n_pixel_format; //图像的格式，定义如下：0：mono8；1：mono10；2：mono12；3：mono14；4：mono16；
	//    5：YUYV彩色；6：UYVY彩色；7：YYUYYV411彩色；8：RGB24bit彩色；9：RGB32bit彩色；
	//        10：JPEG格式；11：bayer8-GBRG；12：bayer8-GRBG；13：bayer8-BGGR；
	//        14：bayer8-RGGB；15-空缺；16-YVYU422彩色;17-VYUY422彩色;18-YYVYYU 411彩色;……；255：代表项目用户自定义格式（项目不同，格式不同）。
	//注：fpga不关心这个值，fx3需要保存上传。
	uint8_t n_tap_num;        //tap数目
	uint8_t n_tap_mode; // tap排列方式    uint32_t n_len_of_raw;//当前raw数据部分字节的数目，即有效后面跟着的上传数据的大小。
	uint32_t n_width;        //图像宽度
	uint32_t n_height;        //图像高度
	uint32_t n_len_of_raw;        //当前raw数据部分字节的数目，即有效后面跟着的上传数据的大小。
	uint64_t n_img_cnt;        //帧编号计数，从0开始一直递增，可以命令清零。
    uint32_t n_real_line_bytes_min;// 实际一行的放到缓存ddr里面的字节数目，16的倍数，最小值；
    uint32_t n_real_line_bytes_max;// 实际一行的放到缓存ddr里面的字节数目，16的倍数，最大值；
    uint32_t n_real_line_num;// 实际一帧图像采集的行数；
	uint8_t rsv1[20];        //
	uint8_t n_device_type;        //采集设备的类型：
			//    0=Cameralink Full/Full 80（普通图）
			//        1= Cameralink Full/Full 80（超大图）
			//        2=SDI 采集
			//        3=GMSL1采集
			//        4=GMSL2采集
			//        5=GMSL3采集
			//        6=GTX特殊协议采集
	uint8_t nBitCount; //图像的bit位深度，一般情况下为8,10,12,14,16等情况    注：fpga不关心这个值，fx3需要保存上传。
	uint8_t n_cap_channel_num;        //实际采集的通道数目，fpga根据此数目进行数据合并上传。
	uint8_t n_dval_lval_mode;        //0=lval有效dval无效；
	//    1= lval无效dval有效；
	//        2=lval有效dval有效；
	uint32_t n_line_clk_num; //一行包含的clk实际数据，是实际图像的横向分辨率/tap数，表示1个16bit整形。Fpga采集的多余的扔掉；不足的，直接用内存残留数据上传即可。
	uint32_t n_line_cnt;   //图像的行数，表示1个16bit整形，    Fpga采集的多余的扔掉；不足的，直接用内存残留数据上传即可。

	uint32_t n_x_offset;        //水平偏移量，采集的时候跳过这么多水平CLK数，
	uint32_t n_y_offset;        //垂直偏移量，采集的时候跳过这么多行；
	uint32_t n_fval_set_value; //0=面阵相机；             其他值代表线阵相机，内部自己产生的fval包含行数。                 注：fpga不关心这个值，fx3需要保存上传。
//	uint16_t n_ddr_line_bytes;// FPGA内部进DDR一行的字节数目（需要16的倍数，方便DDR快速写入）
	uint8_t Rsv2[12];        //

	uint32_t n_cc1_pwm_high;        //cc1设置的输出pwm的高电平持续时间us
	uint32_t n_cc1_pwm_low;        //cc1设置的输出pwm的低电平持续时间us
	uint32_t n_cc1_pwm_cnt;        //cc1设置的本次输出pwm的个数
	uint32_t n_cc1_pwm_current;        //cc1设目前本次输出pwm的计数值
	uint8_t S1_sel;//S1测试点对应的功能选择：
	uint8_t S2_sel;//S2测试点对应的功能选择：
	uint8_t Rsv4[10];//
	uint32_t n_uart_baud;        //虚拟串口的波特率，默认115200
	uint8_t n_uart_stop_bit;        //虚拟串口的停止位，默认1
	uint8_t n_uart_pority;        //虚拟串口的极性，默认0
	uint8_t Rsv5[378];        //
	uint32_t ar_flc_data[26 * 4]; //Flc统计值，26个uint32_t数值一组，4组分别是：当前值，最大值，最小值，波动值。    可以命令reset。
	uint8_t Rsv6[72];
	uint64_t tailer; //++固定帧尾标志，依次为： 0x45 0x51 0x44 0x01 0x45 0x51 0x44 0x01
} tag_grab_config;


#define GRAB_PARAM_DEFAULT_VALUE \
{ \
	PARAM_VALID_HCODE,\
	1,\
	0,\
	1,\
	0,\
	IMAGE_WIDTH,\
	IMAGE_HEIGHT,\
	IMAGE_SIZE,\
	0,\
	0,\
	0,\
	0,\
	{0,0,0,0,0,0,0,0},\
	0,\
	8,\
	1,\
	0,\
	IMAGE_WIDTH,\
	IMAGE_HEIGHT,\
	0,\
	0,\
	0,\
	{0,0,0,0,0,0,0,0,0,0,0},\
	1000,\
	39000,\
	0,\
	0,\
	0,\
	1,\
	{0,0,0,0,0,0,0,0,0,0},\
	115200,\
	1,\
	0,\
	{0},\
	{0},\
	{0},\
	PARAM_VALID_TCODE,\
}

extern tag_grab_config grabconfParam;
extern uint32_t grabsysStatus;


/*function
********************************************************************************
<PRE>
函数名   :
功能     : 存储/读取用户参数区内容
参数     :
	tagCameraParam *pParam 参数存储的结构体定义
返回值   :
抛出异常 :
--------------------------------------------------------------------------------
备注     :
典型用法 :
--------------------------------------------------------------------------------
作者     :
</PRE>
*******************************************************************************/
CyBool_t GrabWriteUserParam(tag_grab_config *pParam, uint8_t nIndex);// 存储当前参数到用户区
CyBool_t GrabReadUserParam(tag_grab_config *pParam, uint8_t nIndex);// 读取用户区参数


/*function
********************************************************************************
<PRE>
函数名   :
功能     : 获取指定模式下的用户参数配置信息，这里的思路是上电需要先读fpga的程序版本，确定nIndex
参数     : void
返回值   : flash里的参数对且读取成功 	返回CyTrue
		flash里的参数不对或读取失败	返回CyFalse
抛出异常 :
--------------------------------------------------------------------------------
备注     :
典型用法 :
--------------------------------------------------------------------------------
作者     :
</PRE>
*******************************************************************************/
CyBool_t GrabGetDefaultUserParam(void);

/*function
********************************************************************************
<PRE>
函数名   :
功能     : 更新系统灯的状态，需要供外部线程调用
参数     :
	   uint32_t *status 状态值指针
返回值   : void
抛出异常 :
--------------------------------------------------------------------------------
备注     :
典型用法 :
--------------------------------------------------------------------------------
作者     :
</PRE>
*******************************************************************************/
void GrabGetSystemStatus(void);

/*function
********************************************************************************
<PRE>
函数名   :
功能     : 将上位机传下来的配置参数和本地的做比较
参数     :
	tagCameraParam PcParam 上位机下传的配置参数
返回值   :
抛出异常 :
--------------------------------------------------------------------------------
备注     :
典型用法 :
--------------------------------------------------------------------------------
作者     :
</PRE>
*******************************************************************************/
CyBool_t GrabParamCompareandSet(tag_grab_config *PcParam);

/*function
********************************************************************************
<PRE>
函数名   :
功能     : 读一遍寄存器，更新本地的参数
参数     :
	void
返回值   :
抛出异常 :
--------------------------------------------------------------------------------
备注     :
典型用法 :
--------------------------------------------------------------------------------
作者     :
</PRE>
*******************************************************************************/
void GrabParamUpdate(void);
/*function
********************************************************************************
<PRE>
函数名   :
功能     : 停止/启动 fpga
参数     :
	void
返回值   :
抛出异常 :
--------------------------------------------------------------------------------
备注     :
典型用法 :
--------------------------------------------------------------------------------
作者     :
</PRE>
*******************************************************************************/
void GrabStopFpgaWork(void);
void GrabStartFpgaWork(void);


/*Debug funciton */
void Debug_manul_reset(void);

#endif
